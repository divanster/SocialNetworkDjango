version: '3.8'

services:
  # PostgreSQL for SQL models in Django
  db:
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app_db}
      POSTGRES_USER: ${POSTGRES_USER:-app_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
    networks:
      - backend_network

  # Redis for caching and Celery broker
  redis:
    image: redis:6-alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend_network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 3000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_datalog:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
    restart: always
    networks:
      - kafka_network

  # Kafka broker for event handling
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 60s
      timeout: 20s
      retries: 10
    restart: always
    networks:
      - kafka_network

  # Elasticsearch service
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    environment:
      - discovery.type=single-node
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep '\"status\":\"green\"' || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend_network


  # Django Web Service (ASGI)
  web:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: >
      sh -c "./wait-for-it.sh db:5432 --timeout=60 --strict &&
      ./wait-for-it.sh redis:6379 --timeout=60 --strict &&
      ./wait-for-it.sh kafka:9092 --timeout=60 --strict &&
      ./wait-for-it.sh elasticsearch:9200 --timeout=60 --strict &&
      python /app/manage.py wait_for_db &&
      python /app/manage.py migrate --noinput &&
      python /app/manage.py collectstatic --noinput &&
      daphne -b 0.0.0.0 -p 8000 config.asgi:application"
    volumes:
      - ./backend:/app
      - ./vol/web:/vol/web
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    env_file:
      - ./backend/.env
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend_network
      - kafka_network

  # Celery Worker for task processing
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: sh -c "./wait-for-it.sh db:5432 --timeout=60 --strict &&
      ./wait-for-it.sh redis:6379 --timeout=60 --strict &&
      celery -A config worker --loglevel=info"
    volumes:
      - ./backend:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./backend/.env
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "celery -A config inspect ping || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend_network

  # Kafka Consumer Service
  kafka-consumer:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: sh -c "cd /app/kafka_app && python consumer.py"
    volumes:
      - ./backend:/app
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - ./backend/.env
    healthcheck:
      test: [ "CMD-SHELL", "test -f /app/kafka_app/consumer.py || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    networks:
      - backend_network
      - kafka_network

  # React Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        CHOKIDAR_USEPOLLING: ${CHOKIDAR_USEPOLLING:-true}
        NODE_OPTIONS: ${NODE_OPTIONS:-"--openssl-legacy-provider"}
        REACT_APP_API_URL: ${REACT_APP_API_URL:-"http://web:8000"}
    volumes:
      - ./frontend:/app
    ports:
      - "3001:3000"
    env_file:
      - ./frontend/.env
    depends_on:
      web:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:3000 || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - frontend_network
      - backend_network

# Volumes for data persistence
volumes:
  postgres_data:
  redis_data:
  zookeeper_data:
  zookeeper_datalog:
  kafka_data:
  elasticsearch_data:

# Networks for inter-service communication
networks:
  backend_network:
    driver: bridge
  frontend_network:
    driver: bridge
  kafka_network:
    driver: bridge
