version: '3.8'  # Explicitly set the version to ensure compatibility with Docker features

services:
  # PostgreSQL service for Django models that use SQL
  db:
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app_db}
      POSTGRES_USER: ${POSTGRES_USER:-app_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend_network

  # MongoDB service for apps using MongoEngine
  mongo:
    image: mongo:4.4
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME:-social_db}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-password}
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis service used for caching and Celery broker
  redis:
    image: redis:6-alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend_network

  # Zookeeper service to manage Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_datalog:/var/lib/zookeeper/log
    networks:
      - kafka_network
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka service for handling events and topics
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    ports:
      - "9092:9092"
    networks:
      - kafka_network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Django Web Service (including ASGI for WebSockets)
  web:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: >
      sh -c "
        ./wait-for-it.sh db:5432 -- 
        ./wait-for-it.sh mongo:27017 -- 
        ./wait-for-it.sh redis:6379 -- 
        ./wait-for-it.sh kafka:9093 -- 
        python /app/manage.py wait_for_db &&
        python /app/manage.py makemigrations --noinput &&
        python /app/manage.py migrate --noinput &&
        python /app/manage.py collectstatic --noinput &&
        daphne -b 0.0.0.0 -p 8000 config.asgi:application
      "
    volumes:
      - ./backend:/app
      - ./vol/web:/vol/web
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - ./backend/.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend_network
      - kafka_network

  # Celery Worker for processing tasks asynchronously
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: >
      sh -c "
        ./wait-for-it.sh kafka:9093 -- 
        celery -A config worker --loglevel=info
      "
    volumes:
      - ./backend:/app
    depends_on:
      db:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - ./backend/.env
    networks:
      - backend_network
      - kafka_network

  # Celery Beat for scheduling tasks periodically
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: >
      sh -c "
        ./wait-for-it.sh kafka:9093 -- 
        celery -A config beat --loglevel=info
      "
    volumes:
      - ./backend:/app
    depends_on:
      db:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - ./backend/.env
    networks:
      - backend_network
      - kafka_network

  # Worker to run background Django tasks using Channels
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: python /app/manage.py runworker default --verbosity 2
    volumes:
      - ./backend:/app
      - ./vol/web:/vol/web
    depends_on:
      db:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - ./backend/.env
    networks:
      - backend_network
      - kafka_network

  # Kafka Consumer for Albums - consuming album-related messages from Kafka
  kafka-consumer-albums:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: >
      sh -c "
        ./wait-for-it.sh kafka:9093 -- 
        python manage.py run_kafka_consumer_albums
      "
    volumes:
      - ./backend:/app
    depends_on:
      db:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - ./backend/.env
    networks:
      - backend_network
      - kafka_network
    restart: always

  # React Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        CHOKIDAR_USEPOLLING: ${CHOKIDAR_USEPOLLING:-true}
        NODE_OPTIONS: ${NODE_OPTIONS:-"--openssl-legacy-provider"}
        REACT_APP_API_URL: ${REACT_APP_API_URL:-"http://localhost:8000"}
    volumes:
      - ./frontend:/app
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/.env
    networks:
      - frontend_network

# Volumes for data persistence
volumes:
  postgres_data:
  mongo_data:
  redis_data:
  zookeeper_data:
  zookeeper_datalog:
  kafka_data:

# Networks for inter-service communication
networks:
  backend_network:
    driver: bridge
  frontend_network:
    driver: bridge
  kafka_network:
    driver: bridge
