version: '3.8'  # Explicitly set the version to ensure compatibility with Docker features

services:
  # PostgreSQL for SQL models in Django
  db:
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app_db}
      POSTGRES_USER: ${POSTGRES_USER:-app_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend_network

  # MongoDB for MongoEngine without authentication
  mongo:
    image: mongo:4.4
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME:-social_db}
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - backend_network
    healthcheck:
      test: ["CMD-SHELL", "mongo --eval 'db.adminCommand({ ping: 1 })'"]
      interval: 30s
      timeout: 20s
      retries: 10
    ulimits:
      nofile:
        soft: 64000
        hard: 64000

  # Redis for caching and Celery broker
  redis:
    image: redis:6-alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend_network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 3000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_datalog:/var/lib/zookeeper/log
    networks:
      - kafka_network
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka broker for event handling
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS: 60000
    volumes:
      - kafka_data:/var/lib/kafka/data
    ports:
      - "9092:9092"
    networks:
      - kafka_network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Django Web Service (including ASGI for WebSockets)
  web:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: >
      sh -c "
      sleep 10 &&
      python /app/manage.py wait_for_db &&
      python /app/manage.py migrate --noinput &&
      python /app/manage.py collectstatic --noinput &&
      gunicorn --workers=2 --bind 0.0.0.0:8000 config.wsgi:application
      "
    volumes:
      - ./backend:/app
      - ./vol/web:/vol/web
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - ./backend/.env  # Includes the Sentry DSN, PostgreSQL, and Redis configurations
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend_network
      - kafka_network

  # Celery Worker for asynchronous task processing
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A config worker --loglevel=info
    volumes:
      - ./backend:/app
    depends_on:
      db:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - ./backend/.env
    networks:
      - backend_network

  # Celery Beat for periodic task scheduling
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A config beat --loglevel=info
    volumes:
      - ./backend:/app
    depends_on:
      db:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./backend/.env
    networks:
      - backend_network

  # Worker for background Django tasks using Channels
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: python /app/manage.py runworker default --verbosity 2
    volumes:
      - ./backend:/app
      - ./vol/web:/vol/web
    depends_on:
      db:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      web:
        condition: service_healthy
    env_file:
      - ./backend/.env
    networks:
      - backend_network
      - kafka_network

  # React Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        CHOKIDAR_USEPOLLING: ${CHOKIDAR_USEPOLLING:-true}
        NODE_OPTIONS: ${NODE_OPTIONS:-"--openssl-legacy-provider"}
        REACT_APP_API_URL: ${REACT_APP_API_URL:-"http://localhost:8000"}
    volumes:
      - ./frontend:/app
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/.env
    networks:
      - frontend_network

# Volumes for data persistence
volumes:
  postgres_data:
  mongo_data:
  redis_data:
  zookeeper_data:
  zookeeper_datalog:
  kafka_data:

# Networks for inter-service communication
networks:
  backend_network:
    driver: bridge
  frontend_network:
    driver: bridge
  kafka_network:
    driver: bridge
