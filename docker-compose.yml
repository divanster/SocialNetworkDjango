
services:
  # PostgreSQL for SQL models in Django
  db:
    image: postgres:13-alpine
    platform: linux/arm64
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app_db}
      POSTGRES_USER: ${POSTGRES_USER:-app_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data:delegated
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
    networks:
      - backend_network

  # Redis for caching and Celery broker
  redis:
    image: redis:6-alpine
    platform: linux/arm64
    volumes:
      - redis_data:/data:delegated
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend_network

  # Zookeeper for Kafka
  zookeeper:
    image: bitnami/zookeeper:latest
    platform: linux/arm64
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 3000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data:delegated
      - zookeeper_datalog:/var/lib/zookeeper/log:delegated
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
    restart: always
    networks:
      - kafka_network

  # Kafka broker for event handling
  kafka:
    build:
      context: .
      dockerfile: Dockerfile.kafka
    platform: linux/arm64
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms512M"
    volumes:
      - kafka_data:/var/lib/kafka/data
    ports:
      - "9093:9092"
    healthcheck:
      test: [ "CMD", "/opt/bitnami/kafka/bin/kafka-topics.sh", "--list", "--bootstrap-server", "kafka:9092" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    dns:
      - 8.8.8.8
      - 1.1.1.1
    networks:
      - kafka_network

  # Django Web Service (ASGI)
  web:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    command: >
      sh -c "./wait-for-it.sh db:5432 --timeout=60 --strict &&
      ./wait-for-it.sh redis:6379 --timeout=60 --strict &&
      ./wait-for-it.sh kafka:9092 --timeout=120 --strict &&
      python /app/manage.py wait_for_db &&
      python /app/manage.py migrate --noinput &&
      uvicorn config.asgi:application --host 0.0.0.0 --port 8000 --reload"
    volumes:
      - ./backend:/app:cached
      - ./vol/web:/vol/web:delegated
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - ./backend/.env
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    dns:
      - 8.8.8.8
      - 1.1.1.1
    networks:
      - backend_network
      - kafka_network

  # Celery Worker for task processing
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    command: sh -c "./wait-for-it.sh db:5432 --timeout=60 --strict &&
      ./wait-for-it.sh redis:6379 --timeout=60 --strict &&
      celery -A config worker --loglevel=info"
    volumes:
      - ./backend:/app:cached
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - ./backend/.env
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "celery -A config inspect ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    dns:
      - 8.8.8.8
      - 1.1.1.1
    networks:
      - backend_network
      - kafka_network

  # Kafka Consumer Service
  kafka-consumer:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    command: sh -c "python manage.py run_kafka_consumer"
    volumes:
      - ./backend:/app:cached
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./backend/.env
    healthcheck:
      test: ["CMD-SHELL", "python manage.py kafka_consumer_healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    dns:
      - 8.8.8.8
      - 1.1.1.1
    networks:
      - backend_network
      - kafka_network

  # React Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    command: npm start
    volumes:
      - ./frontend:/app:cached
    ports:
      - "3000:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - NODE_OPTIONS=--openssl-legacy-provider
      - REACT_APP_API_URL=http://localhost:8000/api/v1
      - REACT_APP_WEBSOCKET_URL=ws://localhost:8000/ws
    depends_on:
      web:
        condition: service_healthy
    networks:
      - frontend_network
      - backend_network

# Volumes for data persistence
volumes:
  postgres_data:
  redis_data:
  zookeeper_data:
  zookeeper_datalog:
  kafka_data:

# Networks for inter-service communication
networks:
  backend_network:
    driver: bridge
  frontend_network:
    driver: bridge
  kafka_network:
    driver: bridge
